＜エラー・対応予定内容＞
[未対応]
・集計・合計の記載を作成（foreach or 関数）　
・予約登録の修正。島さん作成内容をまずは踏襲して学習（日またぎはできない）
・問い合わせページの作成（メール送信試す）
・システムズ概要とかのページの作成
・管理者用のログインページ作成
・サイトマップとかデータベース設計を最新を反映して修正
・”ReservationDAO"の"find3"でなぜ”':end_date', $start_date,”ではなく、
　"$stmt->bindValue(':end_date', $start_date, PDO::PARAM_STR);"なのか？
・予約の修正。
　・３日以上の予約の場合、中間の日付の予約が登録されない。
　・重複して予約ができない様に予約済みを弾く方法を考える。
	　→予約の表から予約を直接する？（この場合、長期の予約はいちいち登録手間）
	　→予約した内容がDBでNGかどうかをチェックして、NGを返すとか。カーシェア予約的にやる感じ。
　・現在時刻以降の予約しかできない様に修正（過去の予約はできなくする）
　・表示を30分単位に変える。
・予約の時間入力部分で30分単位での入力ができたが、時計マークを外さないと1分単位も可能なまま。
・”reservation_list.php”で削除ボタンを押した後に、"delete_reservation.php"を経由し、
　”reservation_list.php”に戻ってきた際には、予約の一覧が消えてしまうのはなぜか？
・登録済みの予約を編集する際に”edit_reservation.php”にて駐車場の番号の選択が表示されなくなる。
・登録済みの予約を編集する際に管理者側から入ると”edit_reservation.php”にてユーザーの情報が表示されなくなる。
・予約登録から最終的に利用実績につなぐために、どの状態で予約だけでなく利用したと定義するか検討必要。
[済み]
・”edit_parking.php”で駐車場情報を編集し更新ボタンを押しても更新されない。
　データベースも更新されない。
　->"require_once 'daos/ParkingDAO.php';"のスペルミス。"parkingDAO"と小文字になっていた。
・”show_reserve.php”で予約のIDをクリックし、予約情報の詳細を見ようとするときちんと表示されない。
　データとしては飛んでいそうだが重複のデータもありおかしい。
　->ReserveDAOのfindメソッドのreserveに以下のスペルミス。
　　$stmt->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Resereve');
・”reserve_create.php"で同じユーザーでの予約登録が２回目ができない。
　->reserves テーブルで emailカラムが unique設定されているため、
　　同じemailを持った＠同一人物が登録できない状態。
　　emailや電話番号など個人にuniqueに紐づけられている特性はusersテーブルに保存するのが普通。
・テーブル設計の再考。
　・制約の付け方やemailや電話番号など個人にUniqueに紐づけられている特性はusersテーブルに保存する。
　・フィールドのカラム名の変更
　  users :user_id->account, parking：adress->address

=============<Git>=============
<初回登録>
git init
git add .
git commit -m "画面遷移作成中"

<GitHubとの連携>
git remote add origin https://github.com/ytk-ua/ParkingReservationSys.git
git branch -M main
git push -u origin main

<繰り返しの登録>
git add .
git commit -m "xxxx"
git push origin main

=============<MySQL>=============
<起動> DB名：rsv_sys
sudo systemctl start mariadb
mysql -u root
use rsv_sys;

<"useres"テーブル作成[DB：rsv_sys]>
create table users(
    id int auto_increment primary key,
    name varchar(255) not null,
    user_id varchar(255) not null,
    email varchar(255) not null unique,
    password varchar(255) not null,
    created_at timestamp default CURRENT_TIMESTAMP
);

<"useres"テーブル修正[DB：rsv_sys]>
create table users(
    id int auto_increment primary key,
    name varchar(255) not null,
    room_no int not null;
    account varchar(255) not null unique,
    password varchar(255) not null,
    email varchar(255),
    tel varchar(255),
    created_at timestamp default CURRENT_TIMESTAMP
);

<"parking"テーブル作成[DB：rsv_sys]>
create table parking(
    id int auto_increment primary key,
    parking_id varchar(255) not null unique,
    adress varchar(255) not null,
    size varchar(255) not null,
    price varchar(255),
    remarks varchar(255),
    created_at timestamp default CURRENT_TIMESTAMP
);

<"parkings"テーブルにて修正[DB：rsv_sys]>
create table parkings(
    id int auto_increment primary key,
    parking_name varchar(255) not null unique,
    price int not null,
    address varchar(255),
    size varchar(255),
    remarks varchar(255),
    created_at timestamp default CURRENT_TIMESTAMP
);

<"reserves"テーブル作成[DB：rsv_sys]>
create table reserves(
    id int auto_increment primary key,
    user_mul int not null,
    start_date int not null,
    start_time int not null,
    end_date int not null,
    end_time int not null,
    parking_mul int not null,
    parking_id varchar(255) not null,
    room_no int not null,
    email varchar(255) not null unique,
    tel int not null,
    remarks varchar(255),
    created_at timestamp default CURRENT_TIMESTAMP,
    foreign key(user_mul) references users(id)
    on delete cascade
    on update cascade,
    foreign key(parking_mul) references parking(id)
    on delete cascade
    on update cascade
);

<"reservations"テーブル作成[DB：rsv_sys]>
create table reservations(
    id int auto_increment primary key,
    user_id int not null,
    parking_id int not null,
    start_date date not null,
    start_time time not null,
    end_date date not null,
    end_time time not null,
    email varchar(255),
    tel varchar(255),
    remarks varchar(255),
    created_at timestamp default CURRENT_TIMESTAMP,
    foreign key(user_id) references users(id)
    on delete cascade
    on update cascade,
    foreign key(parking_id) references parkings(id)
    on delete cascade
    on update cascade
);

<"notices"テーブル作成[DB：rsv_sys]>
create table notices(
    id int auto_increment primary key,
    regist_date date not null,
    title varchar(255) not null,
    overview varchar(255),
    link_url varchar(255),
    created_at timestamp default CURRENT_TIMESTAMP
);

<Table"reserves"のデータ型の変更（日付:date,時間:timeに変更）>
alter table [テーブル名] modify [カラム名]　[データ型];
alter table reserves modify start_date date;
alter table reserves modify start_time time;
alter table reserves modify end_date date;
alter table reserves modify end_time time;

<Table"users"のデータ型,not nullの変更
alter table [テーブル名] modify [カラム名] [データ型] [not null] [制約];
alter table users modify password varchar(255) not null;
alter table parking modify price int(11) not null;
alter table users modify room_no int(11) not null;
alter table users modify account varchar(255) not null unique;
alter table users modify password varchar(255) not null;

<Table"reserves"のemailのUNIQUE制約の削除＞
alter table [テーブル名] drop index [カラム名];
alter table reserves DROP INDEX email;
alter table users DROP INDEX email;

＜テーブルのフィールド変更作業＞
[フィールドの順番入れ替え]
alter table [テーブル名] modify [移動したいカラム名] text after [移動したいカラム名の上にくるカラム名];
(例えばuser_idをidの下に持ってきたい場合は、alter table テーブル名 modify user_id text after id;)
alter table users modify password text after user_id;
alter table parking modify price text after parking_id;
alter table users modify password text after account;

[フィールドの追加]
alter table [テーブル名] add [追加したいカラム名] [型名] [初期値] after [追加したいフィールドの場所]; 
alter table users add tel varchar(255) after email;
alter table users add room_no int(11) after tel;
alter table users add account varchar(255) not null after room_no;
alter table notices add image varchar(255) after link_url;

[（未対応：うまくできてない）フィールドの名前の変更]
alter table [テーブル名] rename column [列名] to [新しい列名];
alter table users rename column user_id to account;
ALTER TABLE テーブル名 CHANGE COLUMN 既存のカラム名 新カラム名 型名 制約(オプション);
alter table users change column user_id account;
alter table users change user_id account;

[フィールドの削除]
alter table [テーブル名] drop column [削除するカラム名];
alter table users drop column user_id;

[テーブルのデータの全削除]
delete from [テーブル名];
delete from users;
delete from parking;

[テーブル自体を全削除]
drop table [テーブル名];
drop table users;
drop table parking;